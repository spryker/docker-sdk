#!/usr/bin/env bash

# shellcheck disable=SC2034
set -e
SELF_SCRIPT=${SELF_SCRIPT:-$0}

pushd "${BASH_SOURCE%/*}" >/dev/null
. ./bin/framework.sh
popd >/dev/null

import environment/cross-platform.sh
import environment/docker.sh
import environment/docker-compose.sh
import environment/composer.sh

# Overridable
DOCKER_COMPOSE_SUBSTITUTE=$(Environment::getDockerComposeSubstitute)

# Help intro
import command/deploy.sh

# Commands
Registry::Help::section "Commands:"
import command/uknown.sh
import command/help.sh

# Compose
Registry::Help::row ''
import command/compose/up.sh
import command/compose/run.sh
import command/compose/ps.sh
import command/compose/restart.sh
import command/compose/stop.sh
import command/compose/down.sh

# CLI
Registry::Help::row ''
import command/cli/cli.sh
import command/cli/console.sh
import command/cli/testing.sh
import command/compose/exec.sh

# Runtime
Registry::Help::row ''
import command/runtime/wait.sh
import command/runtime/demo.sh
import command/runtime/clean-data.sh
import command/runtime/jobs.sh
import command/runtime/logs.sh

# Building
Registry::Help::row ''
import command/build/pull.sh
import command/build/{{ _fileMode }}/build.sh
import command/build/{{ _fileMode }}/export.sh

# Installation
Registry::Help::row ''
import command/install/install.sh
import command/install/clean.sh
import command/install/reset.sh

# Commands for internal use
import command/internal/trouble.sh
import command/internal/sync.sh
import command/internal/prune.sh

# Installers
{% if services['scheduler']['engine'] is defined and services['scheduler']['engine'] == 'jenkins' %}
import installer/jenkins-template.sh
{% endif %}
{% if _requirementAnalyzerData.hosts is not empty %}
import installer/hosts.sh "{{ _requirementAnalyzerData.hosts }}"
{% endif %}
{% if _mountMode == 'nfs' %}
import installer/nfs.sh
{% endif %}
{% if _isAutoloadCacheEnabled %}
import installer/autoload-cache.sh
{% endif %}

# Services
import service/service.sh
import service/database/{{ services['database']['engine'] | default('mysql') }}.sh
import service/broker/{{ services['broker']['engine'] | default('rabbitmq') }}.sh
import service/scheduler/{{ services['scheduler']['engine'] | default('jenkins') }}.sh

{% if _isAcpLocalDevelopmentEnabled %}
# ACP
[[ -f "{{ image['environment']['ACP_DOCKER_SDK_FILE'] }}" ]] && source "{{ image['environment']['ACP_DOCKER_SDK_FILE'] }}"
{% endif %}

# Implementation
import sdk/compose.sh
import sdk/data/demo.sh
import sdk/runtime/wait.sh
import sdk/mount/{{ _mountMode }}.sh
import sdk/images/{{ _fileMode }}.sh
import sdk/assets/{{ _fileMode }}.sh
import sdk/codebase/{{ _fileMode }}.sh

# Go!
System::Bootstrap

# Internal constants
readonly PROJECT_DIR="$(pwd)"
readonly DEPLOYMENT_DIR="$(cd "${BASH_SOURCE%/*}" >/dev/null 2>&1 && pwd)"
readonly DEPLOYMENT_PATH="${DEPLOYMENT_DIR/$PROJECT_DIR/.}"
readonly SECRETS_FILE_PATH="${DEPLOYMENT_DIR}/.secrets"

PROGRESS_TYPE=${PROGRESS_TYPE:-tty}
if [ -n "$GITHUB_ACTIONS" ]; then
    PROGRESS_TYPE=auto
fi
readonly PROGRESS_TYPE

VERBOSE=${VERBOSE:-0}

# Predefined constants
readonly APPLICATION_ENV="{{ environment | default('docker') }}"
declare -a -r SPRYKER_APPLICATIONS=({{ _applications | join(' ') | raw }})
declare -a -r SPRYKER_ENTRYPOINTS=({{ _entryPoints | join(' ') | raw }})
readonly COMPOSE_PROJECT_NAME={{ namespace | default('spryker') }}
readonly SPRYKER_PIPELINE=${SPRYKER_PIPELINE:-{{ pipeline | default('docker') }}}
readonly SPRYKER_PLATFORM_IMAGE=${SPRYKER_PLATFORM_IMAGE:-{{ image is iterable ? image['tag'] : image | default('spryker/php:7.2') }}}
readonly SPRYKER_DOCKER_PREFIX=${COMPOSE_PROJECT_NAME}
readonly SPRYKER_DOCKER_TAG="{{ tag | default('1.0') }}"
readonly SPRYKER_FRONTEND_IMAGE="{{ assets['image'] | default('nginx:alpine') }}"
readonly SPRYKER_COMPOSER_MODE="{{ composer.mode | default('') }}"
readonly SPRYKER_COMPOSER_AUTOLOAD="{{ composer.autoload | default('') }}"
readonly SPRYKER_COMPOSER_VERBOSE="{{ composer.verbose is defined ? composer.verbose : '-vvv' }}"
readonly SPRYKER_LOG_DIRECTORY="{{ docker['logs']['path'] | default('/var/log/spryker') }}"
readonly SPRYKER_ASSETS_MODE="{{ assets['mode'] | default('development') }}"
readonly SPRYKER_DB_ENGINE="{{ services['database']['engine'] == 'mysql' ? 'mysql' : 'pgsql' }}"
readonly SPRYKER_STORES=({{ regions | map((regionData, region) => "'local REGION=" ~ '"' ~ region ~ '"' ~ "; local STORES=(" ~ (regionData['stores'] | keys | join(' ')) ~ ")'") | join(' ') | raw }})
readonly SPRYKER_DEFAULT_STORE="{{ (regions | first)['stores'] | keys | first }}"
{% if dynamicStoreMode == true %}
readonly SPRYKER_DEFAULT_REGION="{{ regions | keys | first }}"
{% endif %}
readonly SPRYKER_FILE_MODE="{{ _fileMode }}"
readonly SPRYKER_XDEBUG_MODE_ENABLE="{{ docker['debug']['xdebug']['enabled'] is not defined or docker['debug']['xdebug']['enabled'] == true ? '1' : '' }}"
readonly SPRYKER_CUSTOM_XDEBUG_HOST_IP="{{ docker['debug']['xdebug']['custom_host_ip'] | default('') }}"
readonly SPRYKER_SYNC_SESSION_NAME="{{ _syncSessionName }}"
readonly SPRYKER_SYNC_VOLUME="${SPRYKER_DOCKER_PREFIX}_${SPRYKER_DOCKER_TAG}_data_sync"
readonly DOCKER_COMPOSE_FILES_EXTRA="{{ docker['compose']['yamls'] | default([]) | join(' ') }}"
readonly SPRYKER_DASHBOARD_ENDPOINT="{{ _dashboardEndpoint }}"
readonly KNOWN_HOSTS="{{ _knownHosts | default("") }}"
readonly SPRYKER_BUILD_HASH="${SPRYKER_BUILD_HASH}"
readonly SPRYKER_BUILD_DATE="${SPRYKER_BUILD_DATE}"
readonly SPRYKER_REPOSITORY_HASH="${SPRYKER_BUILD_HASH:-"$(git rev-parse --verify HEAD 2>/dev/null || echo "head")"}"
readonly SPRYKER_MAINTENANCE_MODE_ENABLED="{{ docker['maintenance']['enabled'] | default('false') }}"

# PHP extensions
{% for phpExtensionName in _phpExtensions %}
readonly {{ phpExtensionName | upper }}_EXTENSION_ENABLED="${TRUE}"
{% endfor %}

# Specific variables
{% for serviceName, serviceData in services %}
{% set engine = serviceData['engine'] | lower %}
{% include "service/" ~ engine ~ "/" ~ serviceName ~ ".bash.twig" ignore missing with _context %}
{% endfor %}

# NodeJS variables
{% for envName, envValue in _node_npm_config %}
readonly {{ envName }}="{{ "${%s:-%s}" | format(envName, envValue) }}"
{% endfor %}

# Variables from environment
SPRYKER_XDEBUG_ENABLE="$([ "${SPRYKER_XDEBUG_ENABLE}" == '1' ] && echo '1' || echo '')"
SPRYKER_XDEBUG_ENABLE_FOR_CLI=''
SPRYKER_TESTING_ENABLE="$([ "${SPRYKER_TESTING_ENABLE}" == '1' ] && echo '1' || echo '')"
SPRYKER_TESTING_ENABLE_FOR_CLI=''
SPRYKER_CURRENT_STORE=${SPRYKER_STORE:-${APPLICATION_STORE:-${SPRYKER_DEFAULT_STORE}}}
{% if dynamicStoreMode == true %}
SPRYKER_CURRENT_REGION=${SPRYKER_REGION:-${SPRYKER_CURRENT_REGION:-${SPRYKER_DEFAULT_REGION}}}
{% endif %}
readonly GITHUB_TOKEN=${GITHUB_TOKEN:-''}
if [ -n "${GITHUB_TOKEN}" ]; then
    readonly TOKEN_BASED_COMPOSER_AUTH="{\"github-oauth\":{\"github.com\":\"${GITHUB_TOKEN}\"}}"
fi
readonly COMPOSER_AUTH=${COMPOSER_AUTH:-${TOKEN_BASED_COMPOSER_AUTH}}
readonly SSH_AUTH_SOCK_ON_HOST=${SSH_AUTH_SOCK:-"${DEPLOYMENT_PATH}/context/ssh/ssh-agent.mock"}
readonly SSH_AUTH_SOCK_IN_CLI="$([ -n "${SSH_AUTH_SOCK}" ] && [ -z "${COMPOSER_AUTH}" ] && echo '/home/spryker/ssh-relay/ssh-auth.sock' || echo '')"

# Global variables
readonly USER_FULL_ID=$(Environment::getFullUserId)
readonly SPRYKER_XDEBUG_HOST_IP=${SPRYKER_CUSTOM_XDEBUG_HOST_IP:-$(Environment::getHostIp)}
readonly SECRETS_ENVIRONMENT=("COMPOSER_AUTH='${COMPOSER_AUTH}'")

command=${1}
shift || true

while getopts ":xvt" opt; do
    case ${opt} in
        x)
            SPRYKER_XDEBUG_ENABLE=1
            ;;
        t)
            SPRYKER_TESTING_ENABLE=1
            ;;
        v)
            VERBOSE=1
            ;;
        [?])
            if [ "${OPTARG}" == '-' ]; then
                # Stop reading global arguments if `--` appeared
                break
            fi

            Console::error "\nUnknown option ${INFO}-${OPTARG}${WARN} is acquired."
            exit 1
            ;;
        :)
            Console::error "Option ${INFO}-${opt}${WARN} requires an argument."
            exit 1
            ;;
    esac
done
shift $((OPTIND - 1))

# Exporting for docker-compose
export DEPLOYMENT_PATH
export SPRYKER_XDEBUG_HOST_IP
export SSH_AUTH_SOCK_ON_HOST
export COMPOSE_PROJECT_NAME
export SPRYKER_DOCKER_PREFIX
export SPRYKER_DOCKER_TAG
export SPRYKER_TESTING_ENABLE
export SPRYKER_XDEBUG_MODE_ENABLE
export SPRYKER_XDEBUG_ENABLE
export SPRYKER_LOG_DIRECTORY
export SPRYKER_BUILD_HASH
export SPRYKER_BUILD_DATE
export BLACKFIRE_SERVER_ID=${BLACKFIRE_SERVER_ID}
export BLACKFIRE_SERVER_TOKEN=${BLACKFIRE_SERVER_TOKEN}
export BLACKFIRE_CLIENT_ID=${BLACKFIRE_CLIENT_ID}
export BLACKFIRE_CLIENT_TOKEN=${BLACKFIRE_CLIENT_TOKEN}
export BLACKFIRE_APM_ENABLED=${BLACKFIRE_APM_ENABLED:-{{ image['environment']['BLACKFIRE_APM_ENABLED'] is defined ? image['environment']['BLACKFIRE_APM_ENABLED'] : services['blackfire'] is defined ? 1 : 0 }}}
export TIDEWAYS_APIKEY=${TIDEWAYS_APIKEY}
export TIDEWAYS_CLI_ENABLED=${TIDEWAYS_CLI_ENABLED}
export TIDEWAYS_ENVIRONMENT_NAME=${TIDEWAYS_ENVIRONMENT_NAME}

{# For avoid https://github.com/docker/compose/issues/9104 #}
export DOCKER_COMPOSE_TTY_DISABLED="$(Environment::getDockerComposeTTY)"

{% if _isAcpLocalDevelopmentEnabled %}
# ACP
export ACP_AWS_ENDPOINT={{ image['environment']['AWS_ENDPOINT'] | default('http://localhost:4566') }}
export ACP_AWS_REGION={{ image['environment']['AWS_DEFAULT_REGION'] | default('eu-central-1') }}
export ACP_AWS_ACCESS_KEY_ID={{ image['environment']['AWS_ACCESS_KEY_ID'] | default('test') }}
export ACP_AWS_SECRET_ACCESS_KEY={{ image['environment']['AWS_SECRET_ACCESS_KEY'] | default('test') }}
{% endif %}

Registry::Flow::runBoot

# Running command
func=$(Registry::findCommand "${command}")

if [ -z "${func}" ]; then
    Command::unknown "${command}" "${@}"
    exit 1
fi

${func} "${@}"
