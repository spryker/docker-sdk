# Tempo runs as user 10001, and docker compose creates the volume as root.
# As such, we need to chown the volume in order for Tempo to start correctly.
  tempo-init:
    image: &tempoImage grafana/tempo:main-1a21818
    user: root
    entrypoint:
        - "chown"
        - "10001:10001"
        - "/var/tempo"
    volumes:
        - {{ serviceName }}-{{ serviceData['engine'] }}-data:/var/tempo:rw

  tempo:
    image: *tempoImage
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
        - ./${DEPLOYMENT_PATH}/context/otel-stack/tempo.yaml:/etc/tempo.yaml
        - {{ serviceName }}-{{ serviceData['engine'] }}-data:/var/tempo:rw
    networks:
        - private
    ports:
        - "14268"  # jaeger ingest
        - "3200:3200"   # tempo
        - "4317"  # otlp grpc
        - "4318"  # otlp http
        - "9411"   # zipkin
    depends_on:
        - tempo-init
    healthcheck:
        test: [ "CMD", "curl", "-f", "http://localhost:3200/metrics" ]
        interval: 30s
        timeout: 10s
        retries: 3
        start_period: 10s

  collector:
    image: otel/opentelemetry-collector:0.86.0
    command: [ "--config=/etc/otel-collector.yaml" ]
    volumes:
        - ./${DEPLOYMENT_PATH}/context/otel-stack/otel-collector.yaml:/etc/otel-collector.yaml
    networks:
        - private
    healthcheck:
        test: [ "CMD", "curl", "-f", "http://localhost:13133/health" ]
        interval: 30s
        timeout: 10s
        retries: 3
        start_period: 10s
    ports:
        - "4318:4318"
        - "4317:4317"
  prometheus:
    image: prom/prometheus:latest
    command:
        - --config.file=/etc/prometheus.yaml
        - --web.enable-remote-write-receiver
        - --enable-feature=exemplar-storage
    networks:
        - private
    volumes:
        - ./${DEPLOYMENT_PATH}/context/otel-stack/prometheus.yaml:/etc/prometheus.yaml
    ports:
      - "9090:9090"
    healthcheck:
        test: [ "CMD", "curl", "-f", "http://localhost:9090/-/healthy" ]
        interval: 30s
        timeout: 10s
        retries: 3
        start_period: 10s

  grafana:
    image: grafana/grafana:11.0.0
    volumes:
        - ./${DEPLOYMENT_PATH}/context/otel-stack/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
        - ./${DEPLOYMENT_PATH}/context/otel-stack/grafana-dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
        - ./${DEPLOYMENT_PATH}/context/otel-stack/dashboards/:/var/lib/grafana/dashboards/
    networks:
        - public
        - private
    environment:
        - GF_AUTH_ANONYMOUS_ENABLED=true
        - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
        - GF_AUTH_DISABLE_LOGIN_FORM=true
        - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    labels:
        'spryker.app.name': grafana
        'spryker.app.type': hidden
        'spryker.project': ${SPRYKER_DOCKER_PREFIX}:${SPRYKER_DOCKER_TAG}
    ports:
        - "3000:3000"
    healthcheck:
        test: [ "CMD", "curl", "-f", "http://localhost:3000/" ]
        interval: 30s
        timeout: 10s
        retries: 3
        start_period: 10s
