{% set ssl = (docker['ssl']['enabled'] | default(false)) ? true : false %}

# Important for proxy server. E.g. to pass gzip correctly.
proxy_http_version 1.1;
server_names_hash_bucket_size 128;
server_tokens off;
client_max_body_size 0;

large_client_header_buffers 4 32k;

map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

map "${SPRYKER_XDEBUG_MODE_ENABLE}" $xdebug_mode_enabled {
    "1"      "_xdebug";
    default "";
}

map $cookie_XDEBUG_SESSION $xdebug_mode_from_cookie {
    ""      "";
    default "$xdebug_mode_enabled";
}

map "${SPRYKER_XDEBUG_ENABLE}" $xdebug_mode {
    "1"      "$xdebug_mode_enabled";
    default "$xdebug_mode_from_cookie";
}

map "${SPRYKER_TESTING_ENABLE}" $testing_mode {
    "1"      "1";
    default "";
}

server {
    server_name _ default_ssl; # This is just an invalid value which will never trigger on a real hostname.
    listen 443 ssl http2;
    error_page 497 https://$host:$server_port$request_uri;
    include /etc/nginx/vhost.d/ssl.default.conf;
    return 502;
}

server {
    server_name _ default; # This is just an invalid value which will never trigger on a real hostname.
    listen 80;
    error_page 497 http://$host:$server_port$request_uri;
    return 502;
}

# APPLICATIONS
{% for groupData in groups %}
{% for applicationName, applicationData in groupData['applications'] %}

{% for endpoint, endpointData in applicationData['endpoints'] %}
{% set upstream = endpoint | normalize_endpoint %}
{% set debugPort = _endpointDebugMap[endpoint] %}
{% set port = (endpoint | split(':'))[1] | default(80) %}
{% set host = endpoint | split(':') | first %}
upstream {{ upstream }} {
    server frontend:{{ port }};
}
{% if applicationData['application'] != 'static' %}
upstream {{ upstream }}_xdebug {
    server frontend:{{ debugPort }};
}
{% endif %}
{% include "nginx/http/gateway/#{applicationData['application']}.server.conf.twig" with {
    ssl: ssl,
    endpoint: endpoint,
    endpointData: endpointData,
    upstream: upstream ~ '$xdebug_mode',
    project: _context
} %}

{% if applicationData['application'] != 'static' %}
# Debug: {{ endpoint }}
{% include "nginx/http/gateway/#{applicationData['application']}.server.conf.twig" with {
    portToListen: debugPort,
    ssl: ssl,
    endpoint: endpoint,
    endpointData: endpointData,
    upstream: upstream ~ '_xdebug',
    project: _context
} %}
{% endif %}
{% endfor %}
{% endfor %}
{% endfor %}

# LOCAL SERVICES
{% for serviceName, serviceData in services %}
{% for endpoint, endpointData in serviceData['endpoints'] %}
{% set protocol = endpointData['protocol'] | default('http') %}
{% if protocol is same as ('http') and serviceData['engine'] %}
{% include "nginx/http/gateway/#{serviceData['engine']}.server.conf.twig" with {
    ssl: ssl,
    endpoint: endpoint,
    endpointData: endpointData,
    upstream: serviceName ~ (serviceData['web-port'] ? ':' ~ serviceData['proxy-port'] : ''),
    project: _context
} %}
{% endif %}
{% endfor %}
{% endfor %}
